runge
-----

First Order Ordinary Differential Equations

Runge-Kutta
Fourth Order Algorithm


Program  RK4  is optimized to solve a system of first order 
differential equations using the Runge-Kutta fourth order algorithm.
This program listing may be used on both the TI-85 and TI-86 
calculators.  The list handling capabilities of these two calculators
is exploited by the program to numerically solve a system of M first
order differential equations.  Although the  TI-86  has resident 
algorithms to numerically compute the solution to a single first order
differential equation, this algorithm is more accurate.

The equations must first be entered into the equation editor,Y= ,  via
the  [GRAPH]  function key.  The variables, however, must now be 
entered as t, Y(1), Y(2),..., Y(M). The equations in the equation 
editor now represent y1', y2',..., yM' even though they are listed as
y1, y2,..., yM. The initial conditions y1(a)=x1, y2(a)=x2,..., yM(a)=xM
must be entered in ascending order into a list named Y.  
Store list {x1, x2,..., xM} to Y    

Example 1:

This first example is a system of one equation. 

y' = t*e^t - 2*y    0 < t < 1
y(0) = 1           

would be entered as

y1 = t*e^t - 2*Y(1)

in the equation editor and the initial condition at t=0.

Save list {1} to Y
 
would be entered on the home page.  When  RK4  is run it will prompt 
for the initial boundary value a.  In this case a=0. Then it asks for 
the ending value b, in this case b=1.  Finally the program prompts for
the number of steps desired in the iteration from a to b. 

The output will be displayed as a graph of Y(1) v.s. t.

We can also view the matrix T which is a table of the values of the 
variable t in column one corresponding with the values of the variable
Y(1) in the second column.

Example 2:

Here is a system of two first order differential equations representing
two currents in an electrical network.

I1' = -4*I1 + 3*I2 + 6,         I1(0) = 0
I2' = -2.4*I1 + 1.6*I2 + 3.6    I2(0) = 0
          
Suppose that the values of these two currents are desired to be known
at t=.5.  The system would be entered in the equation editor as

y1 = -4*Y(1) + 3*Y(2) + 6
y2 = -2.4*Y(1) + 1.6*Y(2) + 3.6

Then go to the home page and store the initial condition list.

Save list {0,0} to Y

When the program is run enter a=0, b=.5 and  steps=5.  The output will
be a graph of Y(1) v.s. t. The matrix T with three columns;  the first
for t, the second for Y(1), and the third for Y(2) may also be viewed.

Example 3:

Consider a second order initial value problem.  We can change it into
a system of first order differential equations and solve it 
numerically.

y" - 2*y' + 2*y = e^2t sin t,   o < t < 1
y(0) = -0.4,  y'(0) = -0.6
     
This equation is transformed into the system

u1'(t) = u2'(t)
u2'(t) = e^2t sin t - 2*u1(t) + 2*u2(t)

with initial conditions

u1(0) = -0.4,  u2(0) = -0.6
    
This system is now translated into the equation editor as follows:

y1 = Y(2)
y2 = e^(2*t) - 2*Y(1) + 2*Y(2)

On the home page store the initial condition list.

Save list {-0.4, -0.6} to Y
  
Now run the program.  When prompted, enter a=0, b=1 and steps=10. The 
output of  RK4  will be the same format as in example 2.  If more than
two equations are solved simultaneously, the graph will still 
automatically be Y(1) v.s. t.  The results of all the variables may be
viewed by calling up the matrix T.

Runge-Kutta-Fehlberg
Fourth Order Algorithm


Program  RKF45  implements a more accurate algorithm that is slightly
slower than the previous one for the same number of steps.  But it 
computes the optimum step size for the chosen precision and can usually
do the calculation in fewer steps.  Run the program after inputting the
equation or system of equations and initial conditions as before.  The
program will now prompt for tol.  Input an integer representing the 
number of decimal places of accuracy desired in each calculated step.
a and b are as before.  The last prompt is for hmax.  Input the largest
step size desired.  The program may select a smaller step size for 
accuracy but will not exceed hmax.

The output is a graph connecting all the computed solution points.  
Individual points may be seen by tracing the graph or viewing the 
matrix T.  One note, if repeated calculations are made, you must 
deselect plot1 and reselect the functions  y1, y2,...  as these are 
turned on and off by the program when it graphs the solution.  Also, 
if trig functions are used in your equations, don't forget to select 
the proper mode(radians or degrees).


Runge-Kutta-Vernier
Fifth Order Algorithm


Program  RKV56  operates the same as  RKF45  but with the ability to 
use larger stepsizes.  Happy computing.


Extrapolation Algorithm  Tnn


The  Tnn  algorithm will give a great deal of accuracy, if you have 
time to wait for it.  It also has the drawback that it does not graph 
the solution but just gives the answer at the chosen point or 
points(the fewer the better).  At the tol prompt select a high 
tolerance (otherwise why are you using this program?) and one or two 
steps to get to the desired solution point which should be at t=b.  
The display will show the step currently being calculated on the right
side of the home screen.  The number of steps will change at the 
original  step=   prompt if the step size is too large to achieve the 
desired precision.  The number of steps will be doubled.  When 
completed, the matrix T will be displayed.

Here is a comparison between the four programs.  It is the result of 
the final step for Example 3 with the indicated precision selected:

Program   tol   hmax    #steps   y1         y2
RK4       n/a    n/a      10    .7716      5.4967
RKF45      5     .25       8    .77156     5.49661
RKV56      5     .25       5    .77155     5.49660
Tnn        8     n/a       1    .77155480  5.49661685

Scott Campbell
campbel7@fnbnet.net

